// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.twerno.eduserver.zadanie.entity;

import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import net.twerno.eduserver.zadanie.entity.Zadanie_ZbiorPytan;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Zadanie_ZbiorPytan_Roo_Entity {
    
    declare @type: Zadanie_ZbiorPytan: @Entity;
    
    @PersistenceContext
    transient EntityManager Zadanie_ZbiorPytan.entityManager;
    
    @Version
    @Column(name = "version")
    private Integer Zadanie_ZbiorPytan.version;
    
    public Integer Zadanie_ZbiorPytan.getVersion() {
        return this.version;
    }
    
    public void Zadanie_ZbiorPytan.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void Zadanie_ZbiorPytan.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Zadanie_ZbiorPytan.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Zadanie_ZbiorPytan attached = Zadanie_ZbiorPytan.findZadanie_ZbiorPytan(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Zadanie_ZbiorPytan.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Zadanie_ZbiorPytan.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Zadanie_ZbiorPytan Zadanie_ZbiorPytan.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Zadanie_ZbiorPytan merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Zadanie_ZbiorPytan.entityManager() {
        EntityManager em = new Zadanie_ZbiorPytan().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Zadanie_ZbiorPytan.countZadanie_ZbiorPytans() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Zadanie_ZbiorPytan o", Long.class).getSingleResult();
    }
    
    public static List<Zadanie_ZbiorPytan> Zadanie_ZbiorPytan.findAllZadanie_ZbiorPytans() {
        return entityManager().createQuery("SELECT o FROM Zadanie_ZbiorPytan o", Zadanie_ZbiorPytan.class).getResultList();
    }
    
    public static Zadanie_ZbiorPytan Zadanie_ZbiorPytan.findZadanie_ZbiorPytan(String id) {
        if (id == null || id.length() == 0) return null;
        return entityManager().find(Zadanie_ZbiorPytan.class, id);
    }
    
    public static List<Zadanie_ZbiorPytan> Zadanie_ZbiorPytan.findZadanie_ZbiorPytanEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Zadanie_ZbiorPytan o", Zadanie_ZbiorPytan.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
