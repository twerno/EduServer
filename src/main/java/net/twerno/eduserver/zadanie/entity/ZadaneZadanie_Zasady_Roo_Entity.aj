// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.twerno.eduserver.zadanie.entity;

import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import net.twerno.eduserver.zadanie.entity.ZadaneZadanie_Zasady;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ZadaneZadanie_Zasady_Roo_Entity {
    
    declare @type: ZadaneZadanie_Zasady: @Entity;
    
    @PersistenceContext
    transient EntityManager ZadaneZadanie_Zasady.entityManager;
    
    @Version
    @Column(name = "version")
    private Integer ZadaneZadanie_Zasady.version;
    
    public Integer ZadaneZadanie_Zasady.getVersion() {
        return this.version;
    }
    
    public void ZadaneZadanie_Zasady.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void ZadaneZadanie_Zasady.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void ZadaneZadanie_Zasady.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            ZadaneZadanie_Zasady attached = ZadaneZadanie_Zasady.findZadaneZadanie_Zasady(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void ZadaneZadanie_Zasady.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void ZadaneZadanie_Zasady.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public ZadaneZadanie_Zasady ZadaneZadanie_Zasady.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        ZadaneZadanie_Zasady merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager ZadaneZadanie_Zasady.entityManager() {
        EntityManager em = new ZadaneZadanie_Zasady().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long ZadaneZadanie_Zasady.countZadaneZadanie_Zasadys() {
        return entityManager().createQuery("SELECT COUNT(o) FROM ZadaneZadanie_Zasady o", Long.class).getSingleResult();
    }
    
    public static List<ZadaneZadanie_Zasady> ZadaneZadanie_Zasady.findAllZadaneZadanie_Zasadys() {
        return entityManager().createQuery("SELECT o FROM ZadaneZadanie_Zasady o", ZadaneZadanie_Zasady.class).getResultList();
    }
    
    public static ZadaneZadanie_Zasady ZadaneZadanie_Zasady.findZadaneZadanie_Zasady(String id) {
        if (id == null || id.length() == 0) return null;
        return entityManager().find(ZadaneZadanie_Zasady.class, id);
    }
    
    public static List<ZadaneZadanie_Zasady> ZadaneZadanie_Zasady.findZadaneZadanie_ZasadyEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM ZadaneZadanie_Zasady o", ZadaneZadanie_Zasady.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
